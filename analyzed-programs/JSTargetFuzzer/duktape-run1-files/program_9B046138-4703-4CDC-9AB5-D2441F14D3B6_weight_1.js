let v2 = "POSITIVE_INFINITY";
const v3 = "-1321174441" ^ "size";
const v4 = [v2,v3,"-1321174441",v3];
const v5 = [v4];
[v5,"-1321174441","size"];
v2 = "-1321174441";
function f7() {
    return "size";
}
function f11(a12, a13) {
    const o20 = {
        "c": -618405.0030071682,
        set f(a15) {
            let v16;
            try { v16 = a15(a15, "size", f7, this); } catch (e) {}
            const v17 = [-618405.0030071682,a15,0.769634121062916,0.769634121062916,a15];
            [[f7,v16,v17,"-1321174441",a13],v17];
        },
        "d": -618405.0030071682,
        [-618405.0030071682]: 0.769634121062916,
        "g": "size",
    };
    return o20;
}
const v22 = f11(-618405.0030071682, f11(0.769634121062916, "-1321174441"));
f11(0.769634121062916, 7.782393308834234e+307);
const v27 = [-2147483647,4294967295,2147483648,255,5,-268435456,-5,-65535,30881,1073741824];
const v28 = [-1,5,0];
const v29 = [268435439,-9223372036854775808,-41245,536870889,35223];
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a33;
}
new F30(v29, v28);
d = v3;
try { v4.slice(263970318, 30974); } catch (e) {}
+8;
!8;
const v42 = -2.0;
Math.cos(8);
v42 << 8;
new F30(v28, v29);
new F30(v29, v27);
let v50 = 0;
while (v50 < 0) {
    v27 ** -1413170494;
    [15,-195573067,9007199254740992,4294967295,4294967295,27804,-5,4566,-63342,-17886];
    try { v5.forEach(f7, v22); } catch (e) {}
    try { v5.reduceRight(f7); } catch (e) {}
    new BigUint64Array(1000);
    new Uint32Array(194);
    new Float32Array(1000);
    [-65536,536870888,-4294967295,9,9007199254740992,-39672,7,65535,5];
    [1768458921,-1865700706,-1459930215,4461];
    v50++;
}
