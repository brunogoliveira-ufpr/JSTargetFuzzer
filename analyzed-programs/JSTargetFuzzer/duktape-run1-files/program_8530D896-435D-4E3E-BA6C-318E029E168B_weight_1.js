[0.07062367916160917,5.0,-8.291158416836149,1000.0,1000.0,-1e-15,2.366577295186726];
const v4 = [-Infinity,-1.0,0.33182006539976927,-1.0,1000000000.0,Infinity,0.3966829967462364];
[-6.759382308588508,-609.651167778162,1e-15];
[3.0,964.7548667217761,-4.367818972180865,1.0,0.08785954879709779,0.0,3.606785705343441,-1000000.0];
[-4.290058813376225,166.35790117236797];
const v11 = v4[7];
try { new v11(-9007199254740990, 536870887, v11, v11, 1073741825, v11); } catch (e) {}
[-2.2250738585072014e-308,-4.0,-642150.1256633999,-4.403507973085925,-950035.8335992787,906.5660677763822];
~541964588;
Object.defineProperty([-2147483649,-1,-1], 2150, { value: 0 });
const v26 = new Int16Array(2213);
const v29 = new Uint16Array(1000);
const v30 = +v29;
const o31 = {
    [v30]: v30,
};
const t16 = 536870888;
t16[2133] >>= 170836399;
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a39;
}
new Float64Array(1000);
const v43 = new Float32Array(109);
for (let i = 0; i < 5; i++) {
    for (let v48 = 0; v48 < 5; v48++) {
    }
}
let v49 = 0;
v49++;
const t29 = [1.2159299768668375e+308,-6.138702377387015,2.0,1000000000.0,-1000000000000.0];
delete t29[1680];
const v54 = [-54193,64,-65536,16];
v43[11] *= 0;
v4[2652] ^= -4.542250198511928;
new Float32Array(1539);
new Uint8Array(10);
new Int8Array(255);
v54.lastIndexOf(3.0, 4096);
let v68 = 0;
do {
    const o69 = {
    };
    1975383941 ** +1975383941;
    try { Int8Array(); } catch (e) {}
    function f76() {
        return f76;
    }
    const v77 = [-9.448964787333276e+307,-1e-15,-1000000000000.0,1000000000000.0];
    v77.concat(-1024, f76, v77, this, Array(252));
    new Proxy(v26, o69);
    v68++;
} while (v68 < 5)
