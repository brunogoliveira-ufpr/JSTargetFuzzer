const v0 = [817659213,-65535,5,-4294967297,268435440,268435456];
[1000,5,15,14683,31354,2];
const v2 = [-9007199254740991,-65536,-515943600,10,-1429176506,16];
new Int8Array(46);
const v8 = new Int32Array(3608);
const v11 = new Uint32Array(0);
const v12 = [];
const v13 = [1000000000.0,1000000000.0,0.9388337623349788,-4.0,-Infinity,-9.293649218929135,Infinity,151543.75293456437];
let v16 = -891028.0909642829;
Math.atan2(v16, v8);
const v21 = v11.byteLength;
const v27 = (12 ** v0) % v0;
Math.cos(v2);
-9007199254740990 - v27;
Math.cos(v8);
const v31 = v16--;
Math.atan2(v31, v16);
v31 + 3608;
[3.0,0.8023470185372807,-8.454179429660591];
[-1000000000000.0,0.006441707830545318,-5.886330714207495];
new Uint16Array(3014);
new Int16Array(12);
let v48 = 164;
new Uint8ClampedArray(v48);
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    this.b = a56;
    this.d = a56;
}
new F51("valueOf", "valueOf", "-36925", v13);
const v58 = new F51("-36925", "valueOf", v12, v13);
new F51("valueOf", "-36925", "-36925", v12);
Math.trunc(0.4009627560905705);
v58.length = 6;
const v67 = Symbol.isConcatSpreadable;
v21 ** Symbol;
Symbol - +Symbol;
!Symbol;
Math.sqrt(Symbol);
("bigint")[v67];
v48++;
Math.log2(26016);
"7NWoM" >> 0.4009627560905705;
~"7NWoM";
Math.log2(26016);
Math.atan2(-4294967296, -4294967296);
