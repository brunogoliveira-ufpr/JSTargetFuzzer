function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a6;
    this.c = 9;
    this.a = -56899;
}
const v7 = new F3(-56899, F3);
const v8 = new F3(-9223372036854775808, v7);
new F3(-9223372036854775808, -9223372036854775808);
function f10(a11, a12) {
    const o20 = {
        __proto__: v8,
        "h": a11,
        "d": 9,
        get c() {
            this[Symbol.isConcatSpreadable] = a11;
            v7.a = a12;
            try { this.toString(this, v7, this, this); } catch (e) {}
            super.a = a12;
            [5.0,1000000000000.0];
            [-1.3084132803047324e+307];
            return [159636.89910534513,-945.4501926545842,1000000000000.0,526756.5469353928,333.07626327925664,-1.3067695180763543,-1.3794601302916707e+308,1.0,639424.5732443368];
        },
    };
    return o20;
}
f10(9, -56899);
f10(9, 9);
f10(-56899, -56899);
let v26 = -4096;
v26 = -2100249710;
[179472897,18769,12,129,610628203,257,-4294967295,268435456,17050,-4294967296];
[9007199254740990,268435441,2147483647,-8545];
[-2053726540,-12,564174910,-2147483647];
f10(v26, 4294967297);
let v31 = 0;
while (v31 < 2) {
    [[[-9223372036854775808 - -56899,F3]]];
    v31++;
}
