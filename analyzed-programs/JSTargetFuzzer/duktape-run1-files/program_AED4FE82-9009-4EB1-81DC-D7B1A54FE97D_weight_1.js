let v0 = [-584813814,2147483649,2,268435439,512];
const v1 = [1073741824,10,13820,-466762101,-48038,129,-16,13];
const v2 = [-2147483648,268435440];
class C3 {
    static #valueOf(a5, a6) {
        v0 = v2;
        return v1;
    }
    get f() {
        const v8 = v2 < this;
        const o9 = {
            55: v0,
            "c": v8,
        };
        v1[this] = o9;
        return v0;
    }
    f;
    #a;
}
const v10 = new C3();
const v11 = new C3();
const v12 = new C3();
[-1000000000.0,-719.5657290503821,15.107744954485383,-467.64614237207263,-Infinity,2.0,-2.220446049250313e-16,1.7976931348623157e+308,-6.411990936983532];
[2.220446049250313e-16,-9.694484498083584,0.0,-312.3735131539818,-1e-15,-1.567047762600099e+308];
const v18 = [-1.0408871141435604e+308,-1000.0,NaN,-1000.0,5.233862321957271e+307,0.3221422582320541,2.9261354147707053,-3.514000011976919e+307,-1.683741762279352];
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v12;
}
new F19(7n, v11, C3, v12);
const v26 = new F19(65537n, v12, F19, v10);
let v27 = new F19(65537n, v10, v12, v10);
v27 = v26;
const v30 = new Array(64);
v1.length;
try {
    [[v26,v11,[v27,v11,v18,v26,13n]]];
} catch(e35) {
    try { new e35(v1, e35, e35, v30, e35); } catch (e) {}
}
