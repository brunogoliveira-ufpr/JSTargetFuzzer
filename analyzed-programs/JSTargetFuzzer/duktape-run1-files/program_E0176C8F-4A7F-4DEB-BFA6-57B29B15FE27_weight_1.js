new Uint8ClampedArray(256);
const v8 = new Float64Array(3);
const v11 = new Int8Array(129);
function F12() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = -24917;
}
new F12();
const v16 = new F12();
const v17 = new F12();
const v18 = [-712.3035807579308,5.0,-157.90671206293825,0.8278905065485606,-2.0,-1000.0,1.7976931348623157e+308,0.0,791.8515174490444];
const v19 = [1000000000000.0,4.0,NaN,-1.7976931348623157e+308,-2.2250738585072014e-308,-Infinity,-224769.6539912771];
v11 !== v8;
let v25 = 512;
const v27 = Uint8ClampedArray ** Uint8ClampedArray;
const v28 = 0.7322109796558844 + 0.7322109796558844;
const v29 = +Uint8ClampedArray;
const v30 = v28 + v27;
v27 & v28;
v29 + v30;
[1e-15,1000.0,3.97484349502663e+307];
const v34 = [-2.2161733517138324e+307,-1000000.0,0.8581791922430837,-847.4903820276804,1000000000.0,39524.86842285062];
[2.2250738585072014e-308,-248891.05467534892,0.0,1000000000000.0,-3.0,5.808374957589166,-3.0,1000.0];
[0.0,277.92003259564626,NaN];
v34.d = v17;
v34 - v17;
v18[7] &&= -21038;
const v44 = v19[4294967296];
const v45 = v34;
let v48 = -21038 << v34;
v48 ^ v34;
const v50 = -(-42892);
v48--;
v25 >>= 3;
try { v19.find(v44, v16); } catch (e) {}
let v54 = 10;
const v56 = +1e-15;
const v57 = -1e-15;
Math.imul(v50, v57);
++v54;
~v50;
v57 % v56;
v48 >> v50;
Math.log(v48);
