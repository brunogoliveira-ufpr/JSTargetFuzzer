[[4294967296,[1,-8256,-8256],1]];
const v18 = [0.6174342204332062,1.7976931348623157e+308,-0.0,-1.092245914276891e+308];
const v19 = [5.0,-503.2436740557566];
const v20 = [-1000000.0,1000000000000.0,NaN,867.672258375783];
try {
const t0 = 1725859146;
new t0(1, -8256, 512, -2147483647, -9007199254740991);
} catch (e) {}
[1693665220,10,2056067066];
[4096,-268435456,65537,-256,-4294967296,1024,-256,-6,0,-65535];
[-9,16,675862231,65535,4,16];
let v31 = 0;
while (v31 < 4) {
    const t13 = -9223372036854775807;
    t13[4] = v19;
    function F34(a36, a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
        this.g = v20;
        this.f = -9223372036854775807;
        this.h = 8;
    }
    function F39() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v41 = new F39();
    function F42(a44) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v45 = new F42();
    const v47 = Int32Array >> F39;
    v47 === v45;
    Math.trunc(v47);
    Math.max(v41);
    new F34(-9223372036854775807, -9007199254740991, v20);
    new F34(-9223372036854775807, -9223372036854775807, v18);
    new F34(1725859146, 4294967297, v18);
    v31++;
}
