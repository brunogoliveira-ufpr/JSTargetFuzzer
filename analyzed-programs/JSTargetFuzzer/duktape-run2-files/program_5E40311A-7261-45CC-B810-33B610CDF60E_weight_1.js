const v0 = [2.2250738585072014e-308,5.0,1000000000.0,2.220446049250313e-16,-2.2250738585072014e-308,-Infinity,0.2431811389765165,-1000.0];
const v1 = [5.0,-883.8606489203635,-4.512785872747383,5.0,-506.1584764947369,-1.0755144802873695e+307,-30.797172561139064,-1000000.0];
[94.38553297340968,848.3828664374153];
const v6 = [1000.0,1000.0,v1,1000.0];
const v8 = [[-743920.322545744,v1,v1],v0,-743920.322545744,-858.2173673120832,v6];
"p" + 30891;
let v12 = 10;
v12--;
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a16;
    this.d = -858.2173673120832;
}
const v20 = new F14(1000.0, 1000.0, v6, -743920.322545744);
new F14(-858.2173673120832, v20, v1, -858.2173673120832);
new F14(-858.2173673120832, v8, v0, -743920.322545744);
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    Symbol.isConcatSpreadable;
    new Float64Array(Float64Array, Float64Array, Float64Array);
    "n" / "n";
    this.a = 4294967295;
    this.c = 4294967295;
}
new F23(F23, F23, F23);
const v33 = new F23();
new F23();
[-1.5567140462490644e+308,7.0384525746513695,0.5575564841024824,-7.4634118808054755,-5.0,-1.7936702415061225e+308,-1000000000000.0];
[-983870.4382755774,2.2250738585072014e-308,-5.0,2.530249211314157e+307,0.8472654791565891,-1000000.0,0.6196934982301118];
[604.5895999740223];
new Int8Array(1714);
const v43 = new Uint8Array(129);
new Float64Array(2060, v33, v43);
new Int16Array(998);
const v51 = [0.9909528859975811,-1000000.0,-847395.931988225,5.819010735179074];
const v53 = [41687,266896762,-32532,16,255,1];
const v54 = [255,-2,-9223372036854775807];
Math.asin();
Math.max(3144);
const t35 = "getBigInt64";
t35[7] = "DBBG0";
const o61 = {
    [998]: -65535,
    "c": 998,
    __proto__: v53,
    3: v51,
    16: v54,
};
new Date(255, v33);
const v66 = new Float64Array(3);
const v68 = [v66,Int16Array,Int16Array,3,v66,v51,[3]];
function F69(a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    let v73 = 536870888;
    v73 = -30148;
}
[Date,v68,998,998];
const t56 = 998;
t56[4] = ("bigint")["p"];
const o80 = {
};
new Proxy(Int16Array, o80);
const t62 = "MAX_SAFE_INTEGER";
t62.h |= 512;
