const v0 = [0.0,2.2250738585072014e-308,1000000.0,0.6447131538545893,1e-15,1.3875842226168302,976072.8503463068,0.24262394195506887,-1.6026844079008298e+308];
const v1 = [-0.9901253136068515,2.220446049250313e-16,NaN,0.25213491342119543];
const v2 = [0.7343636733426133,-1000000000000.0,-5.0,-0.0];
let v3;
try { v3 = v1(v1, v2, v1, v1, v1); } catch (e) {}
const v4 = v3 === v2;
const v5 = v4 ? v3 : v2;
let v6;
try { v6 = new v5(v3, v5, v4); } catch (e) {}
v2.length;
new Uint8Array(157);
new Uint8ClampedArray(5);
new Int8Array(10);
function F17(a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = Uint8Array;
    this.f = a19;
}
new F17(Int8Array, v2, 10);
const v23 = new F17(157, v2, 10);
new F17(v23, v0, 10);
const v25 = [16,443853635,3,47817,-65536,65536,-4294967295,1052658825,-1477830014];
const v26 = [-6,268435440,-10,710417484,9223372036854775807,-2147483648,-4294967297,-50249,33626,-9007199254740990];
let v27 = [388128452,-2147483647];
const v30 = new Uint16Array(2);
new Int32Array(5);
new Uint8Array(4);
const v38 = Symbol.isConcatSpreadable;
[268435441,1765482117,-4294967295,2147483648,-14,1,-581059850,1775999605,-25866];
[64,-9223372036854775808,-30753,41252,5,-1024,7];
[-4096,-1073741824,-65536,10000,-1876804060,-268435456,640339938,-5,-13,10];
v27 ^= v3;
v6 = Uint8ClampedArray;
v27[v38] = v25;
const v43 = Symbol.unscopables;
v25[v43] = v43;
typeof v25 === "undefined";
v26[v30];
