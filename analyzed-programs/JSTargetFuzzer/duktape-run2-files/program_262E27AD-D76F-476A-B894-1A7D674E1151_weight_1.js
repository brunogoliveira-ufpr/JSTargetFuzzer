const v6 = [8];
[0.9179016602823116];
[-2.0,-2.0];
let v13 = 65536;
function f18(a19, a20, a21) {
    const o29 = {
        n(a23, a24) {
            -44871 && v13;
            this.__proto__ = this;
            this < v13;
            return a24;
        },
        __proto__: a19,
        "d": -44871,
        1835056351: -10574,
        255: 5.0,
        valueOf() {
            this ^ a19;
            return a19;
        },
        "g": a20,
        [a21]: 5.0,
        [v13]: a21,
        "b": a19,
        "a": 0.9179016602823116,
    };
    return o29;
}
const v30 = f18(1000000000000.0, -1.0508092330130747, -44871);
const v31 = f18(-44871, v6, 65535);
const v32 = f18(v31, -1.0508092330130747, 3);
function f36(a37, a38) {
    const o49 = {
        [v31]: v13,
        "h": 14282,
        __proto__: v30,
        "g": a37,
        "b": 5.0,
        get d() {
            this[this];
            Math.expm1(a37);
            const v46 = -14 << this;
            ++v13 + 283034035;
            return v46;
        },
        [a37]: a37,
        16: a37,
        [v13]: v13,
    };
    return o49;
}
f36(f36(-1.0508092330130747, 5.0), f36(v30, v32));
const v53 = [-409.6596385122307];
const v54 = [2.0,-116.77494940045176];
const v55 = [880570.41456816,3.0,1.6711390122646802e+308,-0.0,-2.220446049250313e-16,2.2250738585072014e-308];
function F59(a61, a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = v54;
}
const v65 = new F59(-1329257878, v54, 48247, v54);
new F59(48247, v55, -1329257878, v55);
new F59(v53, -1329257878, 1024, v54);
function f71() {
    function f73() {
        return arguments;
    }
    return arguments;
}
const v74 = f71(f71, F59, v65, v53, 1024);
[1073741824,-9007199254740990,-9007199254740990,-128,268435441,-1665296830,1073741823,-775952237];
v53.length >>>= -1397934452;
const o79 = {
    [v13]: v13,
    "d": 14,
    __proto__: "d",
    "e": 5.0,
    [14]: v13,
    ["d"]: -10574,
    "f": "d",
    "b": v13,
    "g": v13,
    "h": 14,
};
function f80() {
    return v74;
}
