function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 9;
    this.e = a5;
    this.b = 9;
}
const v6 = new F3(F3);
const v7 = new F3(v6);
new F3(v7);
[2,-41300,-268435456,-268435456,9];
[28721,-63851,9192,-2147483649,-58320,59910,256,16,9223372036854775807];
[-706988920];
[-Infinity,2.0,-0.0];
[1.7976931348623157e+308,363595.1896816138,-1000.0,3.42322300562215e+307,-5.0,467008.99421571754,-1.4336865138506577e+308,1000000000.0,-985.5210982039706,960.571662727993];
[-1.7767956283729873,5.0,0.48974197140876596,-1.323165856213727e+308,-0.0,1000.0,-1000000000.0,-1000.0];
function f18() {
    return 129;
}
const v19 = [5];
const v20 = [-9223372036854775807];
[v20,v20,f18,v19];
const v24 = new EvalError(44);
new Uint8ClampedArray(4096);
new Int32Array(24);
[9];
const v32 = [7,64591,3008,64,4];
const v33 = [3,1000,536870889,-128,-2003151513,9007199254740991,-256,2147483649];
function F34(a36) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a36;
    for (let v37 = 0; v37 < 10; v37++) {
        const v38 = v24.stack;
        try { new a36(v38, 129); } catch (e) {}
    }
    v19[4] **= v19;
    0 < 5;
    new RegExp(0);
}
new F34(v32);
new F34(v33);
new F34(v32);
new Int8Array(0);
new Int32Array(1016);
new Int32Array(317);
const v59 = ([-1000000000.0,-907088.7888462907,416.99693245704793,2.220446049250313e-16,-1e-15,-594.55290540817,752009.5505237647,9.23654653148407,973.1488182196465,-4.0])[7];
v59 >>> v59;
function F61() {
    if (!new.target) { throw 'must be called with new'; }
}
const v65 = new Uint8ClampedArray(198);
new Float64Array(208);
new Int16Array(3171, 44, v65, Float64Array);
new Float64Array(4);
new Float32Array(Float32Array, v65, 16, Float32Array);
new Uint8Array(16);
[-1000000000.0,-907088.7888462907,416.99693245704793,2.220446049250313e-16,-1e-15,-594.55290540817,752009.5505237647,9.23654653148407,973.1488182196465,-4.0];
const v88 = [0.6450021271475713,-Infinity,2.457785734319282,5.0,0.07579924064363774,-365.12750876154246,0.4885923626731591,3.0,3.0762261215735];
[8.28455321080142,2.6710323089565726,609303.1900260369,-5.0];
const v98 = -1.0 * v59;
v98 * -9223372036854775807;
v98 - Int32Array;
Math.hypot(v88);
-9;
~268435441;
v88[-1] >>> 3171;
const t59 = "g";
t59.length &&= v65;
