const v1 = [-1.7976931348623157e+308,-Infinity,4.938827714658585e+306,-0.0,-395.26371570774836,2.0,5.0,-45.36689737613369];
const v2 = [-1.6625408575735392e+308,94.24184437497433,-1000.0,-1.7658119908335903e+308,1000000000.0,2.0,-833.6587026152107];
const v3 = [-5.061697497778635,-2.1268837723052947e+306,-1.0,Infinity,3.0,1.9381162112731936,-1000000000000.0];
const v5 = new Set();
[4096,59775,15,3,8];
[-4,7,-23532,-45785,49758];
[6,25032];
function f9() {
    return v3;
}
const v10 = [687.9008530749131,-1000.0];
[1.116404440899423,2.2250738585072014e-308,-972.6188343073856];
let v12 = [2.220446049250313e-16,223022.85552896163,2.2250738585072014e-308,1000000000.0,4.0,2.2250738585072014e-308,1.0,683349.5504349952,1.7976931348623157e+308];
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = a15;
}
new F13(v5, v10);
const v18 = new F13(v1, v3);
new F13(v18, v3);
v1 || (v12 ||= v2);
typeof F13 === "function";
new Set(v12);
const v25 = f9();
let v26;
try { v26 = v1.splice(v10, f9, v25); } catch (e) {}
try { v26(f9, v12, v26); } catch (e) {}
