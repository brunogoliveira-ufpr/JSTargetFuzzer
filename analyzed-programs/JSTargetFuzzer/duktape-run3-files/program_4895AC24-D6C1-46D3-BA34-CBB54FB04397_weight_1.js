try { ("join").trimRight(); } catch (e) {}
const t1 = "t";
t1[-2.220446049250313e-16] = -1000000000000.0;
for (let v17 = 0; v17 < 5; v17++) {
    try { ("g").trimLeft(); } catch (e) {}
}
const v19 = [-1205706167,-256,-16];
v19[257] = [-5.0,1000000000000.0,5.0,NaN,1e-15];
const v21 = [-20945,-1024,11,5,4294967297,65536];
const v23 = v21.indexOf;
+1000000000.0;
Math.cbrt(4294967296);
Math.round(4294967296);
Math.acos(1938327458);
Reflect.apply(v23, v21, v19);
[2,2147483647,-4,6,57636,268435441];
const v32 = [256,-2147483649,4,-268435456,9223372036854775807,-41576];
const v33 = [536870912];
const v37 = [30240,30240,30240,3];
[30240,3];
[3];
new Date();
const v42 = [80921.50452199462,-8.356087310331528,-52284.84910874348,5.0,1e-15,4.0,-1000000000000.0];
[1.7976931348623157e+308,0.402342188980098,5.0,3.0,-6.500567947636666,523949.2041430522,-1.561118227085225e+308,2.0,-Infinity];
[1.0,0.1493821243088752,-3.864406571010406,6.845894778924372];
function f48() {
    return f48;
}
try { v42.findIndex(f48, v33); } catch (e) {}
const v51 = [];
const v52 = v37.slice;
const v55 = [Int16Array,1885445262];
let v56 = 10;
for (; v56--;) {
    const v58 = [v23,1885445262,v55];
    let v62 = 0;
    do {
        function F63(a65, a66, a67) {
            if (!new.target) { throw 'must be called with new'; }
            this.f = 39253;
            this.h = a65;
            this.c = v58;
        }
        new F63(v58, v62, 11);
        new F63(v58, 1938327458, 1885445262);
        new F63(v32, 1938327458, v52);
        v62++;
    } while (v62 < 8)
}
Reflect.apply(v52, v33, v51);
function F78(a80, a81, a82, a83) {
    if (!new.target) { throw 'must be called with new'; }
    const t52 = -1.5043166490295299;
    t52.e = a82;
}
new Uint16Array();
const v90 = [-20945,-1024,11,5,4294967297,65536];
[-9223372036854775807,-6233,-2098392681];
[2,-7,12,-221294060,4294967296,9007199254740991];
const v97 = [-872192226];
const v98 = v90.indexOf;
v98.apply(v98, v90, v97);
const o103 = {
};
new Proxy(Reflect, o103);
