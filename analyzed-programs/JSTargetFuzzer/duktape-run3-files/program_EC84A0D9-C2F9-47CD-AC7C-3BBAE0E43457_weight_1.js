for (let v13 = 0; v13 < 5; v13++) {
    try { ("g").trimLeft(); } catch (e) {}
}
const v15 = [-1205706167,-256,-16];
v15[257] = [-5.0,1000000000000.0,5.0,NaN,1e-15];
const v17 = [-20945,-1024,11,5,4294967297,65536];
const v19 = v17.indexOf;
Reflect.apply(v19, v17, v15);
[2,2147483647,-4,6,57636,268435441];
[256,-2147483649,4,-268435456,9223372036854775807,-41576];
const v23 = [536870912];
const v27 = [30240,30240,30240,3];
[30240,3];
[3];
new Date();
const v32 = [80921.50452199462,-8.356087310331528,-52284.84910874348,5.0,1e-15,4.0,-1000000000000.0];
[1.7976931348623157e+308,0.402342188980098,5.0,3.0,-6.500567947636666,523949.2041430522,-1.561118227085225e+308,2.0,-Infinity];
[1.0,0.1493821243088752,-3.864406571010406,6.845894778924372];
function f38() {
    return f38;
}
try { v32.findIndex(f38, v23); } catch (e) {}
const v41 = [];
const v42 = v27.slice;
const v45 = [Int16Array,1885445262];
let v46 = 10;
for (; v46--;) {
    [v19,1885445262,v45];
}
Reflect.apply(v42, v23, v41);
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const t32 = -1.5043166490295299;
    t32.e = a60;
}
new Uint16Array();
const v68 = [-20945,-1024,11,5,4294967297,65536];
[-9223372036854775807,-6233,-2098392681];
[2,-7,12,-221294060,4294967296,9007199254740991];
const v75 = [-872192226];
const v76 = v68.indexOf;
v76.apply(v76, v68, v75);
const o81 = {
};
new Proxy(Reflect, o81);
