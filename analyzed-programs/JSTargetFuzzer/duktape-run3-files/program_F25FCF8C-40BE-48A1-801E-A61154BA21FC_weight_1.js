function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = -249375138;
    this.e = -249375138;
}
new F0();
new F0();
new F0();
-Infinity;
[-221799.0812087973,1000000000000.0,383.78759759153127,-Infinity,1.3394287736860951e+308,331.72772428848475,0.0,-1000000000000.0];
[0.46599677713996257,-2.3933867661188923,2.2250738585072014e-308,2.220446049250313e-16,2.220446049250313e-16,4.0,-1000.0];
[5.694074879315226,1e-15,0.0,942.6628248939917,2.2250738585072014e-308,-2.0,0.04188700061861017,1.0,1000000000000.0];
const v21 = [-20945,-1024,11,5,4294967297,65536];
[-9223372036854775807,-6233,-2098392681];
[2,-7,12,-221294060,4294967296,9007199254740991];
const v28 = [767904787];
Reflect.apply(v21.indexOf, v21, v28);
const v35 = new Uint16Array();
const v37 = new Float32Array();
const v39 = new Uint8Array(v35);
let v41;
try { v41 = v35.keys(); } catch (e) {}
const v42 = 536870912 >>> v37;
try { v39.reduce(v41, v42); } catch (e) {}
const v45 = Symbol.split;
try { v45["endsWith"](); } catch (e) {}
const o48 = {
};
new Proxy(Reflect, o48);
