const v5 = new Uint32Array(14);
new Int8Array(8);
const v11 = new Float32Array(128);
v11[8];
8 == v5 ? 8 : v5;
[-358361.859211745,1e-15,-0.0,801.9851456531642];
[-1.3531240252476913,1000.0];
[1.0730461812451622e+307,3.0,-1.0,-1.2282017259936432e+308,872241.9154056828,0.9985030082224844,-8.703526929931081e+307,-8.607351535721023,1.7976931348623157e+308,-3.9353165422537657];
const v21 = new Int16Array();
for (const v22 in v21) {
}
"symbol" + Uint32Array;
new Int8Array();
Int8Array >= -905909.6603291023;
const t13 = [5.262457569570156,1.7976931348623157e+308,-1.7976931348623157e+308,-3.0,-905109.041697038,0.2570789371873976,5.915115177751346];
t13[[5.0,0.35966634621177385,-872.7559926356663,-602.6347451491949,3.0,1000.0,-1.455521934238513e+308,-2.348008365508094,-1e-15,-8.580364342777324]] = [2.2250738585072014e-308,-1.7976931348623157e+308,-1000000.0] < 257;
const v34 = new Uint8ClampedArray();
const v36 = new Uint8Array();
new Uint16Array("91");
const v43 = ["number"];
const v44 = [true,v43,v43];
const v45 = [16627,-8,-815408277,256,-64721,1073741824,-1146738008,6,8];
const v47 = [v44,"number",[-8756,-54281,986968617,-12,0,536870889]];
v47 < v45 ? v47 : v45;
let v50;
try { v50 = v34.map(Uint8Array, v36); } catch (e) {}
v36.length = -44531;
v36.toString = v50;
