[5,128,-1682536240,9223372036854775807,9,1000];
[-3,-9223372036854775808,-1073741824,6,9223372036854775807,-11765,-14,536870887,2147483647];
[-9007199254740992,256,536870912,47196,-168639817,9007199254740992,9,10218,9007199254740991,-15];
[2.2250738585072014e-308,8.680319927227377,1000.0,-915.6105341617016,263310.30929147126,Infinity,2.0,4.0];
[788703.2279492004,-1000000000.0,-0.8474066859408467,1000.0,1.0,0.5584454477714281];
[781473.5931035976,-1000000000.0,-4.124456394598603,-751.0838609745863,-1000000000000.0,770.3468627832851,442.2067329276083,2.0,0.0];
new Uint16Array(16);
new Uint32Array(2824);
const v24 = new Uint8ClampedArray(9);
const v27 = new Int16Array(16);
new Int32Array(38);
v24.b = 2824;
const v33 = Uint16Array || -9007199254740990;
const v37 = new Int8Array(67);
const v38 = [-1729498238,2,-65062];
const v39 = [-54343,268435439,1073741825,-26588];
[127];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = Int32Array;
    v39.__proto__;
    const v50 = new v33(3313);
    for (let v51 = 0; v51 < 32; v51++) {
        v50["p" + v51] = v51;
    }
    try { a44["toString"](v37, F41, v39); } catch (e) {}
    this.b = a43;
    this.h = v39;
}
let v56 = new F41(67, v38);
v56++;
const v58 = v27[73];
const v62 = [20399,65535,64,-65535,959875777,65535,-1482454450,-1426284812,-1884160839];
const v63 = [22289];
const v64 = [-233951307,-4294967295,-16539,1073741824,51550,127,14757,-2,26537,-1590790454];
function F67(a69, a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a69;
    this.d = 42962;
    this.h = a71;
}
new F67(42962, -14, 16);
new F67(16, -14, 10);
new F67(F67, 10, -14);
const v79 = [1233757561,-9007199254740991];
delete v62[268435440];
-14 << v63;
typeof -14 === "object";
[10];
[v62,42962,42962,v64];
new Int32Array();
const v93 = v79.__proto__;
for (let v94 = 0; v94 < 32; v94++) {
    const t53 = "p";
    t53[7] = v94;
    try { v93(v64, 16, v94); } catch (e) {}
    v63["p" + v94] = v94;
}
while (0 < 0) {
}
let v103;
try { v103 = v58.log2(); } catch (e) {}
const v104 = v103 && 38;
try { v58(v104); } catch (e) {}
new F41(38, v39);
new F41(16, v39);
const v108 = -Infinity;
const t67 = "dotAll";
t67[Reflect.apply(("L9").includes, "L9")] = v108;
