[5,128,-1682536240,9223372036854775807,9,1000];
const v4 = [-3,-9223372036854775808,-1073741824,6,9223372036854775807,-11765,-14,536870887,2147483647];
const v5 = [-9007199254740992,256,536870912,47196,-168639817,9007199254740992,9,10218,9007199254740991,-15];
function f7(a8, a9, a10) {
    return a9;
    a9.length = a10;
    return a9;
}
f7(v4, v5, "unicode");
[2.2250738585072014e-308,8.680319927227377,1000.0,-915.6105341617016,263310.30929147126,Infinity,2.0,4.0];
[788703.2279492004,-1000000000.0,-0.8474066859408467,1000.0,1.0,0.5584454477714281];
[781473.5931035976,-1000000000.0,-4.124456394598603,-751.0838609745863,-1000000000000.0,770.3468627832851,442.2067329276083,2.0,0.0];
new Uint16Array(16);
new Uint32Array(2824);
const v29 = new Uint8ClampedArray(9);
const v32 = new Int16Array(16);
new Int32Array(38);
v29.b = 2824;
const v38 = Uint16Array || -9007199254740990;
const v42 = new Int8Array(67);
const v43 = [-1729498238,2,-65062];
const v44 = [-54343,268435439,1073741825,-26588];
[127];
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = Int32Array;
    v44.__proto__;
    const v55 = new v38(3313);
    for (let v56 = 0; v56 < 32; v56++) {
        v55["p" + v56] = v56;
    }
    try { a49["toString"](v42, F46, v44); } catch (e) {}
    this.b = a48;
    this.h = v44;
}
let v61 = new F46(67, v43);
v61++;
const v63 = v32[73];
const v67 = [20399,65535,64,-65535,959875777,65535,-1482454450,-1426284812,-1884160839];
const v68 = [22289];
const v69 = [-233951307,-4294967295,-16539,1073741824,51550,127,14757,-2,26537,-1590790454];
function F72(a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a74;
    this.d = 42962;
    this.h = a76;
}
new F72(42962, -14, 16);
new F72(16, -14, 10);
new F72(F72, 10, -14);
const v84 = [1233757561,-9007199254740991];
delete v67[268435440];
-14 << v68;
typeof -14 === "object";
[10];
[v67,42962,42962,v69];
new Int32Array();
const v98 = v84.__proto__;
for (let v99 = 0; v99 < 32; v99++) {
    const t59 = "p";
    t59[7] = v99;
    try { v98(v69, 16, v99); } catch (e) {}
    v68["p" + v99] = v99;
}
while (0 < 0) {
}
let v108;
try { v108 = v63.log2(); } catch (e) {}
const v109 = v108 && 38;
try { v63(v109); } catch (e) {}
new F46(38, v44);
new F46(16, v44);
const v113 = -Infinity;
const t73 = "dotAll";
t73[Reflect.apply(("L9").includes, "L9")] = v113;
