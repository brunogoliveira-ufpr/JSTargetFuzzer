const v2 = new Float32Array(20);
let v3;
try { v3 = v2(); } catch (e) {}
new Uint32Array();
4096 % 132.84333894457086;
const v9 = 20 ** v3;
const v11 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
v11[1906] ||= 1991039546;
const o13 = {
};
v3 *= v9;
try {
const t0 = 20;
t0(v2, v9, v2);
} catch (e) {}
[2.2250738585072014e-308,-1.7976931348623157e+308,-1000000.0] < 257;
for (let v21 = 0; v21 < 5; v21++) {
}
new Int32Array(8, 8);
-2147483647 % 132.84333894457086;
new Int32Array(102);
new Int32Array(153);
const v39 = new Uint8ClampedArray(16);
const v40 = delete v39[3];
try { v40(v40, 16, 16); } catch (e) {}
[-2135735777,129,65536,5,-65537,-10,-1337586595,45256];
[1,-9223372036854775808,-2053161822,10000,-440874733];
let v45 = 0.7872588412650194;
++v45;
-749336124 % v45;
const t28 = "number";
t28[350729292] >>= 1763;
[64213,1465307329,-9223372036854775807,-12,3];
[10000,-268435456,-65535];
[-56667,1073741823,-52891,52709,-11,4,-65536];
[8121,5,59492];
[-65536,536870912,-2147483648,-9223372036854775808,9007199254740991,-25412,-2147483648,-15];
[6,10,54399,6];
[19275,-14,512,-9,-8,-16246737,2405];
const v63 = [4294967296,-1511855080,61187919];
function F66(a68, a69) {
    if (!new.target) { throw 'must be called with new'; }
    a68 >= a69;
    a69++;
    "charCodeAt" | v63;
}
new F66();
new F66("charCodeAt", v63);
