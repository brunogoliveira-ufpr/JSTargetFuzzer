new Int8Array(16);
new Uint8Array(1024);
function f6() {
}
function f7() {
    return f6;
}
let v12 = [-1024,-4096,8,-5,-661,-2,128,1569217128,53988];
[2147483649,264886449,4294967297,-2147483647,7,1334909290,-12,1073741824,-128,9007199254740992];
const v14 = [-4294967296,-1,-6,16,1462841887,-8,-65535,0];
const v22 = [65537,"-1024",65537,65537,65537];
let v23 = [];
function f24(a25, a26) {
    v14.toString = a26;
    const v29 = [1000.0];
    [-1.4418230383197164e+308,0.301804417836947,-1000000000000.0,4.0,1000000000.0,-1000.0,-0.0];
    const v31 = [588065.6683242572,-494.83908777208205,NaN];
    const v32 = [-1.7976931348623157e+308,6.085047468402518e+307,418014.6557672722,-1000000000.0,-8.086888234374916e+307,1.7976931348623157e+308,740.7899513083887,-2.0,-Infinity];
    const v35 = new Int16Array();
    new Uint16Array(10);
    v29.__proto__ = v35;
    for (let v38 = 0; v38 < 32; v38++) {
        v32["p" + v38] = v38;
    }
    v31[5] >>= 10;
    ++v23;
    +65537;
    1.7976931348623157e+308 >>> v22;
    -268435456 & ++v12;
    return a25;
}
f24(v22);
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
}
const v62 = new F57();
const v63 = new F57(v62, v62, v62);
v62 !== v63;
let v65 = 256;
const v68 = !(5 ^ 5) >>> v65;
v65++;
-v68;
new Uint8ClampedArray(3711);
function f93() {
    return -268435456;
}
new Float32Array();
const v98 = new RegExp();
new Uint32Array();
f93();
~4;
4 / 3;
3 && 256;
for (const v107 in v98) {
    let v108 = ("b").length;
    v108 ^= v108;
    v108 > 4294967296 ? v108 : 4294967296;
}
let v113 = "-1" << f93;
v113--;
Math.atan(12619);
f93 / -2;
