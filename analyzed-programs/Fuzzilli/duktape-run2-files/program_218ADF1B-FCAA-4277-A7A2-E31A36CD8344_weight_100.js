const v0 = [-49380,53025,23212,-7,15,8,-53956,-2147483649,44177];
const v1 = [10,536870912];
const v2 = [2147483648,268435440,-285507218,-7,-30853,-4294967297,-1,-4,3,255];
[v0,v0];
let v4 = [v0,v0];
[v4,v2,v0,v0];
try { v0.findIndex(1024, v0); } catch (e) {}
v4 = v1;
new Float32Array(10);
new Float64Array(2078);
new Int32Array(1027);
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    this.e = -21058;
    this.h = -21058;
}
const v34 = new F31();
new F31(F31, v34, v34);
new F31();
[-981.517554483146,0.6206079014182507,-485233.1808970505,-4.0,5.0,8.307451132836189];
[1.0,1e-15,-25.715159687526693,-1.701490853885856e+308,-2.220446049250313e-16];
[1000.0];
const v40 = [25444,-43343,-1872302988,1857351883,2147483647,-1635872865,-2147483649,129,-59401];
[-4294967297,9,-1587473947,-1,-2027422767,64];
const v45 = new Array(16, v34, [17818], v40);
16 * v45;
const v47 = Array.prototype;
const v57 = [784310004,v47];
let v58 = Array;
const v60 = v58(255);
for (let v63 = 0; v63 < 5; v63++) {
    v58.__proto__;
    v58[-115489985] = v60;
    128 >>> v58;
    const v69 = 536870888 & v40;
    v69 - (v40 | 8);
    Math.acos(v69);
}
const v75 = ++v58;
0.19017189501748666 & v60;
!Math.cos(v75);
1024 + v58;
const v80 = [v57,v45,784310004,1877581954,v47];
const v81 = [v80,16,v47,-1359911438,v80];
v47[64] = Array;
v81 > v57 ? v81 : v57;
function F84(a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a86;
    a87.f = a87;
}
new Uint8Array(2);
new Date();
function f93() {
    return 784310004;
}
[Infinity,-4.0,0.09621297794026296,-577.2760074781743,72096.44976396044,0.2698029281890012,1e-15];
[Infinity,0.7017450677128314,-0.6861496125472826,188989.32474934915,-1.0,-1.5857780086312884e+307,-9.908982691067836,-4.801355659737476e+307];
[-0.0,2.0,-1000000000000.0,-0.0];
function f99() {
    return 0;
}
const o101 = {
    "construct": Array,
    "getOwnPropertyDescriptor": f99,
    "has": Array,
    "set": f99,
};
const v102 = new Int8Array(Int8Array, Int8Array, Int8Array);
const v103 = [-12,-37215,-9007199254740990,6,-60705,9,1073741824];
[1000,-2106386827,2147483649,-65536];
try { v103.some(v103); } catch (e) {}
v102.length;
